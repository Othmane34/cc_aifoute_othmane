Contrôle Continu – GitHub.

Vous répondrez à chacune des questions sur ce fichier texte. 
Pour chacune d'entre elles, vous effectuerez la tache demandée et vous écrirez la ou les commandes necessaires sous la question. 

1. A l'aide du terminal, créez un dossier "CC_nom_prenom" dans lequel vous initialiserez un repository git.
mkdir cc_aifoute_othmane
git init



QUESTIONS DE COURS.
2. Qu'est ce que Git et à quoi sert-il ? 
Git est un gestionnaire local qui permet de versionner des projets, de les modifier et d'acceder à l'historique de ces projets.

3. Expliquez en quelques lignes comment fonctionne Git. 
Git crée un repository en local sur l'ordinateur, puis dans ce repository on y crée des fichiers que l'on peut par la suite modifier. Ces modifications seront enregistrées
sur des branches, et il est ensuite possible de revenir sur des precedentes versions car les modifications sont enregistrées en memoire.  

4. Comparez Git et GitHub.
Git comme expliqué precedemment fonctionne en local, tandis que GitHub permet de stocker dans un repository à distance, en cloud. Github permet notamment de partager un repo avec
des partenaires de travail et de voir les modifications des autres.

5. Donnez les différents statuts des fichiers d'un repository Git, et à quoi ils correspondent.
Unstaged: le fichier vient d'etre crée
Staged: le fichier a été add
Modified: le fichier a été modifié


QUESTIONS PRATIQUES. 

5. Après avoir répondu aux questions de cours, ajoutez ce fichier dans votre repo et faites votre premier commit. 
move controle_continu.txt cc_aifoute_othmane
git add .
git commit -m "Ajout controle_continu.txt"

6. Créez une branche feature et placez vous dessus. Donnez les 3 méthodes de création de branche. 
git branch feature
git switch -c feature
git checkout -b feature

7. Ajoutez un fichier texte film.txt à votre dossier et écrivez votre film préféré à l'intérieur. 
8. Ajoutez un fichier texte serie.txt à votre dossier et écrivez votre série préférée à l'intérieur.

9. Faites un commit en ajoutant uniquement le fichier film.txt à votre commit. 
git add film.txt
git commit -m "ajout film.txt"

10. Ajoutez un fichier citation.txt dans lequel vous écrirez votre citation préférée. 

11. Faites un commit qui ajoute toutes les modifications. 
git add .
git commit -m "ajout serie.txt et citation.txt"

12. Sur une nouvelle branche add_images, créez un fichier "ignore.txt" et ignorez le. Vous ferez ensuite un capture d'écran qui montre que le 
fichier est bien ignoré et vous ajouterez cette capture dans un dossier "images". Vous pourrez ensuite commit les changements.


13. Faites une capture d'écran de vos branches et ajoutez la au dossier image et faites un commit.
14. Mergez vos branches feature et add_images dans master. 
15. Faites une capture d'écran de l'historique de vos commit sur master, ajoutez la au dossier image et faites un commit. 
16. Créez un repo en ligne dans lequel vous pousserez votre dossier. 
17. Sur GitHub, créez un nouveau fichier origin.txt sur la branche master. Puis tirez le dans votre repo local.
18. Créez une nouvelle branche feedback, ajoutez un fichier feedback.txt dans lequel vous écrirez votre feedback sur le cours
(vous ne serez ni avantagé ni pénalisé selon le feedback). Créez ensuite une Pull Request et mergez la dans master depuis GitHub.

Lien de votre repo GitHub : 
Vous laisserez votre repo distant en public et écrirez le lien dans ce fichier que vous rendez sur classroom. 


